// Generated by CoffeeScript 1.10.0
(function() {
  var _ = require('underscore');
  var https = require("https");
  var http = require('http');
  var querystring = require('querystring');
  var URL = require('url');

  var all_cookies = [];

  var get_cookie = function(name,domain){
    var regexp,
      str_exp = '^' + name + '=([^;]*);';
    if (domain !=null && domain!='') str_exp = str_exp + '.*DOMAIN=' + domain.replace(/(\*)/g,'\\*').replace(/(\.)/g,'\\.') + ';';

    eval('regexp =/' + str_exp + '/g');
    for (var ck in all_cookies) {
      try {
        var v = regexp.exec(all_cookies[ck])[1];
        if (v != '')
          return v;
      }catch (undefined){

      }
    }
    return '';
  };

  var get_cookies = function() {
      return all_cookies;
  };

  var get_domain_cookies_string = function (domains) {
    var regexp,str_exp,subck,cookie_map = {},cks = [];

    var dms = domains.split('|');
    //STEP 1:定义了DOMAIN的键值进行匹配
    for (var domain in dms){
      for (var ck in all_cookies) {
        try {
          //$0:result $1:'DOMAIN=' $2:domain
          str_exp = '(DOMAIN=)(' + dms[domain].replace(/(\*)/g,'\\*').replace(/(\.)/g,'\\.') + ');';
          eval('regexp =/' + str_exp + '/');
          subck = regexp.exec(all_cookies[ck]);
          //存在域名且域名匹配时
          if (!(subck[1] == null || subck[1] == '') && !(subck[2] == null || subck[2] == '')) {
            //$0:result $1:name $2:value
            str_exp = '^([^=]*)=([^;]*);';
            eval('regexp =/' + str_exp + '/');
            subck = regexp.exec(all_cookies[ck]);
            //存在键值且键值匹配时,如cookie_map中还未记录则添加
            if (!(subck[1] == null || subck[1] == '') && !(subck[1] in cookie_map))
              cookie_map[subck[1]] = subck[2];
          }
        }catch (undefined){
        }
      }
    }
    //STEP 2:没有定义DOMAIN的键值进行匹配
    for (var ck in all_cookies) {
      try {
        //$0:result $1:'DOMAIN=' $2:domain
        str_exp = '(DOMAIN=)';
        eval('regexp =/' + str_exp + '/');
        var subck = regexp.exec(all_cookies[ck]);
        //存在未明确域名时
        if (subck[1]== null || subck[1]==''){
          //$0:result $1:name $2:value
          str_exp = '^([^=]*)=([^;]*);';
          eval('regexp =/' + str_exp + '/');
          subck = regexp.exec(all_cookies[ck]);
          //存在键值且键值匹配时,如cookie_map中还未记录则添加
          if (!(subck[1] == null || subck[1] == '') && !(subck[1] in cookie_map))
            cookie_map[subck[1]]=subck[2];
        }
      }catch (undefined){
      }
    }

    for(var k in cookie_map) {
      cks.push(k + '=' + cookie_map[k] + ';');
    }
    return cks.join(' ');
  };

  var get_cookies_string = function() {
      var cookie_map = {};
      all_cookies.forEach(function(ck){
        var v = ck.split(' ')[0];
        var kv = v.trim().split('=');
        if(kv[1]!=';') cookie_map[kv[0]] = kv[1];
      });
      var cks = [];
      for(var k in cookie_map) {
        cks.push(k + '=' + cookie_map[k]);
      }
      return cks.join(' ');
  };

  var update_cookies = function(cks) {
      if (cks) {
        all_cookies = _.union(all_cookies, cks);
      }
  };

  var global_cookies = function(cookie) {
    if (cookie) {
      update_cookies(cookie);
    }
    return get_cookies();
  };

  var url_get = function(url_or_options, callback, pre_callback) {
      var http_or_https = http;

      if( ((typeof url_or_options === 'string') && (url_or_options.indexOf('https:') === 0)) ||
          ((typeof url_or_options === 'object') && (url_or_options.protocol === 'https:')) )
        http_or_https = https;

      if(process.env.DEBUG) {
        console.log(url_or_options);
      }
      return http_or_https.get(url_or_options, function(resp){
          if(pre_callback !== undefined) pre_callback(resp);

          if (resp.headers['set-cookie'])
            update_cookies(resp.headers['set-cookie']);

          var res = resp;
          var body = '';
          resp.on('data', function(chunk) {
              return body += chunk;
          });
          return resp.on('end', function() {
            if(process.env.DEBUG) {
              console.log(resp.statusCode);
              console.log(resp.headers);
              console.log(body);
            }
            return callback(0, res, body);
          });
      }).on("error", function(e) {
          return console.log(e);
      });
  };

  var url_post = function(options, form, callback) {
      var http_or_https = http;

      if( ((typeof options === 'object') && (options.protocol === 'https:')) )
        http_or_https = https;

      var postData = querystring.stringify(form);
      if(typeof options.headers !== 'object') options.headers = {};
      options.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
      options.headers['Content-Length'] = Buffer.byteLength(postData);
      options.headers['Cookie'] = get_cookies_string();
      options.headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:27.0) Gecko/20100101 Firefox/27.0';
      if(process.env.DEBUG) {
        console.log(options.headers);
        console.log(postData);
      }
      var req = http_or_https.request(options, function(resp) {
          var res = resp;
          var body = '';
          resp.on('data', function(chunk) {
              return body += chunk;
          });
          return resp.on('end', function() {
            if(process.env.DEBUG) {
              console.log(resp.statusCode);
              console.log(resp.headers);
              console.log(body);
            }
            return callback(0, res, body);
          });
      }).on("error", function(e) {
          return console.log(e);
      });
      req.write(postData);
      return req.end();
  };

  var http_request = function(options, params, callback) {
    var append, aurl, body, client, data, query, req;
    aurl = URL.parse(options.url);
    options.host = aurl.host;
    options.path = aurl.path;
    options.headers || (options.headers = {});
    client = aurl.protocol === 'https:' ? https : http;
    body = '';
    if (params && options.method === 'POST') {
      data = querystring.stringify(params);
      options.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
      options.headers['Content-Length'] = Buffer.byteLength(data);
    }
    if (params && options.method === 'GET') {
      query = querystring.stringify(params);
      append = aurl.query ? '&' : '?';
      options.path += append + query;
    }
    //Cookie、Referer如果未传值则用默认的web qq的内容,有值则不处理,这样兼容性更好
    if (!('Cookie' in options.headers)) options.headers['Cookie'] = get_domain_cookies_string('ptlogin2.qq.com|web2.qq.com|qq.com');
    if (!('Referer' in options.headers)) options.headers['Referer'] = 'http://d1.web2.qq.com/proxy.html?v=20151105001&callback=1&id=2';
    //options.headers['Referer'] = 'http://s.web2.qq.com/proxy.html?v=20130916001&callback=1&id=1';
    options.headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36';
    if(process.env.DEBUG) {
      console.log(options);
      console.log(params);
    }
    req = client.request(options, function(resp) {
      if (options.debug) {
        console.log("response: " + resp.statusCode);
        console.log("cookie: " + resp.headers['set-cookie']);
      }
      resp.on('data', function(chunk) {
        return body += chunk;
      });
      return resp.on('end', function() {
        if(process.env.DEBUG) {
          console.log(resp.statusCode);
          console.log(resp.headers);
          console.log(body);
        }
        return handle_resp_body(body, options, callback);
      });
    });
    req.on("error", function(e) {
      return callback(null, e);
    });
    if (params && options.method === 'POST') {
      req.write(data);
    }
    return req.end();
  };

  var handle_resp_body = function(body, options, callback) {
    var ret = null;
    try {
      ret = JSON.parse(body);
    } catch (err) {
      console.log("解析出错", options.url, body);
      return callback(null, err);
    }
    return callback(ret, null);
  };

  var http_get = function(url, params, callback) {
    if(!callback) {
      callback = params;
      params = null;
    }
    var options = {
      method: 'GET',
      url: url
    };
    return http_request(options, params, callback);
  };

  var http_post = function(options, body, callback) {
    options.method = 'POST';
    return http_request(options, body, callback);
  };

  module.exports = {
    global_cookies: global_cookies,
    get_cookies: get_cookies,
    update_cookies: update_cookies,
    get_cookie: get_cookie,
    get_cookies_string: get_cookies_string,
    get_domain_cookies_string: get_domain_cookies_string,
    request: http_request,
    get: http_get,
    post: http_post,
    url_get: url_get,
    url_post: url_post,
  };

}).call(this);
